#!/usr/bin/env python

# -*- coding: utf-8 -*-

# Author: Milan Nikolic <gen2brain@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os
import sys
import glob
import shutil
import signal
from optparse import OptionParser

try:
    from comicutils import utils
    from comicutils.debug import log
except ImportError, err:
    sys.stderr.write("Error: %s%s" % (str(err), os.linesep))
    sys.exit(1)

def convert_images(tempdir, opts):
    exclude = [] if not opts['exclude'] else opts['exclude']
    images = utils.get_images(tempdir)
    maxrecords = len(images)
    try:
        for filenum, file in enumerate(images):
            filename, fullpath, basename, fileext, cover = file

            if opts['scale'] != '100%' or opts['quality'] != '85':
                utils.image_scale(fullpath, opts)

            if opts['level']:
                if utils.image_color(fullpath) != 'RGB':
                    utils.image_level(fullpath, opts)

            if str(filenum) in exclude:
                continue
            if opts['nocover'] and filename == cover:
                continue
            if opts['norgb'] and utils.image_color(fullpath) == 'RGB':
                continue

            if opts['bmp-4'] or opts['bmp-8']:
                utils.image_bmp(file, opts)
            elif opts['jpeg']:
                utils.image_jpeg(file, opts)
            elif opts['png']:
                utils.image_png(file, opts)

            if opts['verbose']:
                percent = float(filenum) / float(maxrecords) * 100
                sys.stderr.write('Converting images [%d%%]\r' % int(percent))
        return True
    except Exception, err:
        log.Warn('Error converting file %s: %s' % (tempdir, str(err)))
    return False

def exclude_callback(option, opt, value, parser):
    setattr(parser.values, option.dest, value.split(','))

def main(args, opts):
    if opts['outdir']:
        if not os.path.isdir(opts['outdir']):
            log.Error('Error: %s is not a directory' % (opts['outdir']))

    try:
        filenum = 1
        comics = utils.get_comics(args, opts, opts['size'])
        total = len(comics)

        for file in comics:
            filename, basename, fileext, filedir, fullpath, filetype, filesize, filemtime, fileuri = file

            if opts['print']:
                sys.stdout.write('%s\n' % fullpath)
                continue

            if opts['outdir']:
                convdir = os.path.realpath(opts['outdir'])
            else:
                convdir = os.path.join(filedir, '_converted')

            if opts['verbose']:
                sys.stderr.write('File %d of %d\n' % (filenum, total))

            if os.path.isfile(os.path.join(convdir, filename)):
                if opts['verbose']:
                    sys.stderr.write('Skipping %s archive, file %s exists in output dir\n\n' % (
                        filetype, filename))
                filenum += 1
                continue

            if opts['verbose']:
                sys.stderr.write('Proccessing %s archive %s (%sMB)\n' % (
                    filetype, fullpath, filesize/(1024*1024)))
                sys.stderr.write('Unpacking...\r')

            tempdir = utils.unpack_archive(fullpath, filetype, filename)
            if tempdir is not None:
                if opts['verbose']:
                    sys.stderr.write('File %s unpacked\n' % (filename))

                if convert_images(tempdir, opts):
                    if opts['verbose']:
                        sys.stderr.write('File %s converted\n' % (filename))
                    if not opts['outdir'] and not os.path.isdir(convdir):
                        os.mkdir(convdir)
                    if opts['verbose']:
                        sys.stderr.write('Packing... \r')

                    if opts['suffix']:
                        basename = basename + opts['suffix']
                        filename = basename + fileext

                    if opts['rar']:
                        filetype = 'RAR'
                        filename = '%s.cbr' % basename
                    elif opts['zip']:
                        filetype = 'ZIP'
                        filename = '%s.cbz' % basename

                    filepath = os.path.join(convdir, filename)
                    if utils.pack_archive(tempdir, filetype, filepath):
                        if opts['verbose']:
                            sys.stderr.write('File %s packed (%sMB)\n\n' % (
                                filepath, os.path.getsize(filepath)/(1024*1024) ))
                        shutil.rmtree(tempdir)
            filenum += 1
    except KeyboardInterrupt:
        if tempdir:
            shutil.rmtree(tempdir)

if __name__ == '__main__':
    usage = 'usage: %prog <options> <file or directory>'
    parser = OptionParser(usage=usage)
    parser.add_option('-s', '--scale', action='store', dest='scale', type='string', default='100%',
            help='image geometry (default %default)', metavar='<arg>')
    parser.add_option('-q', '--quality', action='store', dest='quality', type='string', default='85',
            help='image quality (default %default)', metavar='<arg>')
    parser.add_option('-l', '--level', action='store', dest='level', type='string', default=None,
            help='adjust the level of image contrast', metavar='<arg>')
    parser.add_option('-o', '--outdir', action='store', dest='outdir', type='string', default=None,
            help='output directory (default is _converted in proccesed directory)', metavar='<arg>')
    parser.add_option('-m', '--size', action='store', dest='size', type='int', default=None,
            help='process only files larger then size (in MB)', metavar='<arg>')
    parser.add_option('-b', '--bmp-4', action='store_true', dest='bmp-4', default=False,
            help='convert images to 4bit BMP format', metavar='<arg>')
    parser.add_option('-c', '--cover', action='store_true', dest='cover', default=False,
            help='convert cover to 8bit BMP instead of 4bit (used with --bmp-4)', metavar='<arg>')
    parser.add_option('-n', '--no-cover', action='store_true', dest='nocover', default=False,
            help='exclude cover', metavar='<arg>')
    parser.add_option('-B', '--bmp-8', action='store_true', dest='bmp-8', default=False,
            help='convert images to 8bit BMP format', metavar='<arg>')
    parser.add_option('-j', '--jpeg', action='store_true', dest='jpeg', default=False,
            help='convert images to JPEG format', metavar='<arg>')
    parser.add_option('-p', '--png', action='store_true', dest='png', default=False,
            help='convert images to PNG format', metavar='<arg>')
    parser.add_option('-e', '--exclude', action='callback', dest='exclude', type='string', callback=exclude_callback,
            help='list of images to exclude (0,2,13)', metavar='<arg>')
    parser.add_option('-g', '--no-rgb', action='store_true', dest='norgb', default=False,
            help='exclude images with RGB colorspace', metavar='<arg>')
    parser.add_option('-r', '--rar', action='store_true', dest='rar', default=False,
            help='convert archive to RAR format', metavar='<arg>')
    parser.add_option('-z', '--zip', action='store_true', dest='zip', default=False,
            help='convert archive to ZIP format', metavar='<arg>')
    parser.add_option('-S', '--suffix', action='store', dest='suffix', type='string', default='',
            help='add suffix to file basename', metavar='<arg>')
    parser.add_option('-R', '--recursive', action='store_true', dest='recursive', default=False,
            help='process subdirectories recursively', metavar='<arg>')
    parser.add_option('-P', '--print', action='store_true', dest='print',
            help='print filenames only')
    parser.add_option('-v', '--verbose', action='store_true', dest='verbose', default=True,
            help='verbose (default)')
    parser.add_option('-Q', '--quiet', action='store_false', dest='verbose',
            help='quiet')
    (opts, args) = parser.parse_args()
    opts_dict = vars(opts)

    path_args = sum(map(glob.glob, args),[])
    if not path_args:
        from PyQt4.QtGui import QApplication
        from comicutils.gui import ComicConvert
        app = QApplication(sys.argv)
        convert = ComicConvert()
        convert.show()

        try:
            signal.signal(signal.SIGINT, signal.SIG_DFL)
            sys.exit(app.exec_())
        except KeyboardInterrupt:
            pass
    else:
        main(path_args, opts_dict)
